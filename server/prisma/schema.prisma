generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  name               String    @unique
  email              String    @unique
  password           String
  avatar             String    @default("default.png")

  subscription       Subscription @default(FREE)

  userGames          UserGame[]
  userOrganizations  UserOrganization[]

  verified           DateTime?
  provider           String?
  providerId         String?

  verificationCode   VerificationCode?

  subscriptionDate   DateTime     @default(now())
  subscriptionEnd    DateTime    
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  deletedAt          DateTime?
}

model VerificationCode {
  id        Int       @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique 
  code       String
  createdAt  DateTime @default(now())

  @@unique([userId, code])
}

model Organization {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  description String
  avatar    String    @default("default.png")

  games     Game[]    
  events    OrganizationEvent[]  @default([ORGANIZATION_CREATED])
  users     UserOrganization[]

  inviteCode String    @unique

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
}

model Game {
  id        Int       @id @default(autoincrement())
  
  mode      GameMode
  result    GameResult
  status    GameStatus @default(PENDING)
  users     UserGame[]

  token     String  @unique
  organization Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?

  initialPosition String @default("startpos")
  moves     String[]   @default([])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
}

model UserGame {
  user      User   @relation(fields: [userId], references: [id])
  userId    Int

  game      Game   @relation(fields: [gameId], references: [id])
  gameId    Int

  color      Color

  @@id([userId, gameId])
}

model UserOrganization {
  user      User   @relation(fields: [userId], references: [id])
  userId    Int

  organization      Organization   @relation(fields: [organizationId], references: [id])
  organizationId    Int

  role Role

  @@unique([userId, organizationId])
}

enum Color {
  WHITE
  BLACK
}

enum Subscription {
  FREE
  PREMIUM
  CORPORATE
  CORPORATE_PLUS
}

enum Role {
  PLAYER
  ADMIN
}

enum GameResult {
  WHITE_WIN
  WHITE_LOSE
  BLACK_WIN
  BLACK_LOSE
  WHITE_RESIGN
  BLACK_RESIGN
  WHITE_TIME_OUT
  BLACK_TIME_OUT
  STALEMATE
  DRAW
  CANCELLED
}

enum Event {
  ORGANIZATION_CREATED
  ORGANIZATION_DELETED
  PLAYER_JOINED
  PLAYER_LEFT
}

enum GameMode {
  TRAINING
  COMPETITIVE
}

enum GameStatus {
  PENDING
  IN_PROGRESS
  FINISHED
}

enum OrganizationEvent {
  ORGANIZATION_CREATED
  ORGANIZATION_UPDATED
  ORGANIZATION_DELETED
}